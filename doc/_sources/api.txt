.. _ref-api:

===============
Using AGAVE API
===============

Basic url is http://localhost:8000/ 

Or in case of running it from a web server: http://domain.com/

In the following:
- Actors: are users or authors
- Instances: are instances or projects
- Concepts: are tags 


Getting graphs JSON data
========================

Authentication
--------------

Provided by Basic HTTP authentication.
 
By default, user: admin, password: admin

Method GET
----------

**/json/<db>/<graphtype>/<graphsubtype>/?a={actor name}** (old)

**/rest/<db>/<graphtype>/<graphsubtype>/actor/<actor_id>** (updated)

*URL variables*:

 ``<graphtype>``
     is a couple of characters in [AA,AC,CC].
        "AA" is the Actors local graph for a given Actor.
        
        "CC" is the Concepts local graph for a given Actor. Currently only support graphsubtype "b"
        
        "AC" is the Actor-Concept local graph for a given Actor. Only support [1,2] graphsubtype.

 ``<AAgraphtype>``
 	 is a character in [p,c,b,n,s,a]) indicating the type of local graph.
 	  
        "p" graph from Instances. Only available for "AA" graphtype
        
        "c" graph from Concepts. Only available for "AA" graphtype
        
        "b" graph from Broader patterns between Concepts. Only available for "AA" or "CC" graphtype
        
        "n" graph from Narrower patterns between Concepts. Only available for "AA" graphtype
        
        "s" graph from Sibling patterns between Concepts. Only available for "AA" graphtype
        
        "a" graph from co-Ancestors patterns between Concepts. Only available for "AA" graphtype
        
        [1,2] is a character indicating 1 or 2 level graph. Only available for "AC" graphtype
        
 ``<db>``
     is the database to query. There're 2 databases: {instances,projects} 
    
 ``<actor_id>``
     is the id of the actor from who the local graph is extracted

*Examples*:
	http://localhost:8000/rest/instances/AA/c/actor/391/
	
    http://localhost:8000/rest/instances/CC/b/actor/2/
    
	http://localhost:8000/rest/instances/AC/2/actor/391/
    
Getting graphs Javascript visualizations
========================================

**/graph/<db>/<graphtype>/<graphsubtype>/?a={actor name}** (old)

**/graph/<db>/<graphtype>/<graphsubtype>/actor/<actor_id>** (updated)

The same as getting JSON but the URL begins with "graph"

*Examples*:
    http://localhost:8000/graph/instances/AA/c/actor/391/
    
    http://localhost:8000/graph/instances/CC/b/actor/2/
    
    http://localhost:8000/graph/instances/AC/2/actor/391/

REST API to synchronize the databases
=====================================
Authentication
--------------

Basic HTTP authentication. 

By default, user: admin, password: admin

Instance
--------
    
Method GET
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

**/rest/<db>/instance/{instance_id}/**

Without instance_id returns all instances.

With instance_id return only the instance with that id.

Example:
    http://localhost:8000/rest/projects/instance/2

Method POST
~~~~~~~~~~~~~~~    

**/rest/<db>/instance/**

JSON as POST body:
    id and title are required, year and abstract are optional
    Example ::
    
        {"id": "2",
         "title": "SEUGNET Laurent - ESPCI"
         "year": "", 
         "abtract": "blah"}
    
Method PUT
~~~~~~~~~~~~~~~~~~~~~~~~~~
**/rest/<db>/instance/<instance_id>/**

JSON as PUT body:
    id is not required.
    Example::
    
        {"year": "2010"}
    
Method DELETE
~~~~~~~~~~~~~~~~~~~~~~~~~

**/rest/<db>/instance/<instance_id>/**

Remember to remove related models (InstanceActor and InstanceConcept) before 
removing Instance.

e.g.: for project 2, you should delete the user relation: 

/rest/prjects/instance/2/actor/429

This delete the user relation but not the user itself.

In the case of projects, as the concepts are generated by the app itself, 
there's no need to delete the relations before (but still is needed to delete
the actors). 

InstanceAuthor 
--------------

Tables linking Actors to Instances

    @TODO: weight mandatory?
    
    @TODO: maybe is better to create URL as /rest/<db>/instanceactor/{instanceactor_id}
             and create the JSON body with the actor and instance ids?

    
Method GET
~~~~~~~~~~

**/rest/<db>/instance/<instance_id>/actor/{actor_id}**
    
Without actor_id returns all Actors in the Instance with id instance_id.

With actor_id return only the InstanceActor with the Actor with actor_id
    and Instance with id instance_id.

Example:
    http://localhost:8000/rest/projects/instance/2/actor/2
        
Method POST
~~~~~~~~~~

**/rest/<db>/instance/<instance_id>/actor/<actor_id>**
    
@param instance_id: instance id 

@param actor_id: actor id weight: 1/total number of actors in the instance 

JSON as POST body:
    id is required, weight is optional
    Example::

        {"id": "2", "weight": "1.0"}
    
Method PUT
~~~~~~~~~~

**/rest/<db>/instance/<instance_id>/actor/<actor_id>**
    
@param instance_id: instance id 

@param actor_id: actor id 

JSON as PUT body:
    weight: 1/total number of actors in the instance, 
        e.g. if a instance has 3 actors, then weight is 1/3. 

    Example::
    
        {"id": "2" "weight": "0.3"}
                
        @TODO: does it have sense to modifiy the id?
    
Method DELETE
~~~~~~~~~~

**/rest/<db>/instance/<instance_id>/actor/<actor_id>**

InstanceConcepts
--------------

tables linking Concepts to Instances :

    @TODO: weight mandatory?
    
    @TODO: maybe is better to create URL as /rest/<db>/instanceconcept/{instanconcept_id} and create the JSON body with the concept and instance ids?
    

Method GET
~~~~~~~~~~

**/rest/<db>/instance/<instance_id>/concept/{concept_id}**
    
Without concept_id returns all Concepts in the Instance with id instance_id.

With concept_id return only the InstanceConcept with the Concept with concept_id
    and Instance with id instance_id.

Example:
    http://localhost:8000/rest/projects/instance/2/concept/2
    
Method POST
~~~~~~~~~~

**/rest/<db>/instance/<instance_id>/concept/<concept_id>**

@param instance_id: instance id 

@param concept_id: concept id weight: 1

JSON as PUT body:
    weight: 1 
    Example::
    
        {"id": "2" "weight": "1"}
        
Method PUT
~~~~~~~~~~

**/rest/<db>/instance/<instance_id>/concept/<concept_id>**
    
@param instance_id: instance id 

@param concept_id: concept id

JSON as PUT body:
    weight: 1 
    Example::
    
        {"id": "2" "weight": "1"}
        
@TODO: does it have sense to modifiy the id?
    
Method DELETE
~~~~~~~~~~

**/rest/<db>/instance/<instance_id>/concept/<concept_id>**

Actor
-----

**/rest/<db>/actor/{actor_id}/**

Method GET
~~~~~~~~~~

**/rest/<db>/actor/{actor_id}/**
    
Without actor_id returns all Actors.

With actor_id return only the Actor with that id.

Example:
    http://localhost:8000/rest/projects/actor/2
    
Method POST
~~~~~~~~~~

**/rest/<db>/actor/<actor_id>/**
    
JSON as POST body:
    id and name are required
    Example ::
    
        {"id": "2", 
        "name": "Julia Anaya"}
    
Method PUT
~~~~~~~~~~

**/rest/<db>/actor/<actor_id>/**
    
JSON as PUT body:
    id is not required.
    Example::
    
        {"name": "Michael AA MIGLIOR"}
    
Method DELETE
~~~~~~~~~~

**/rest/<db>/actor/<actor_id>/**

Remember to remove related models (InstanceActor) before removing Actor.

Concept
-------
    
Method GET
~~~~~~~~~~

**/rest/<db>/concept/{concept_id}/**
    
Without concept_id returns all Concepts.

With concept_id return only the Concept with that id.

Example:
    http://localhost:8000/rest/projects/concept/2
        
Method POST
~~~~~~~~~~

**/rest/<db>/concept/<concept_id>/**
    
JSON as POST body:
    id and name are required
    Example::

       { "id": "2",
          "name": "Sleep deprivation"}
    
Method PUT
~~~~~~~~~~

**/rest/<db>/concept/<concept_id>/**
    
JSON as PUT body:
    id is not required.
    Example::
    
        {"name": "Sleep deprivation2"}
    
Method DELETE
~~~~~~~~~~

**/rest/<db>/concept/<concept_id>/**

Remember to remove related models (InstanceConcept) before removing Instance.


